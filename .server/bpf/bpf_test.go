package bpf

import (
	"net/netip"
	"syscall"
	"testing"

	"github.com/stretchr/testify/require"
	"golang.org/x/net/bpf"
)

/*
Ethernet II, Src: ChinaMob_46:32:e0 (b0:30:55:46:32:e0), Dst: IntelCor_c5:63:e5 (a0:e7:0b:c5:63:e5)
Internet Protocol Version 4, Src: 120.232.196.151, Dst: 192.168.1.10
Transmission Control Protocol, Src Port: 8080, Dst Port: 55992, Seq: 1, Ack: 54, Len: 74
*/
var packs0 = []byte{
	0xa0, 0xe7, 0x0b, 0xc5, 0x63, 0xe5, 0xb0, 0x30, 0x55, 0x46, 0x32, 0xe0, 0x08, 0x00,
	0x45, 0x74, 0x00, 0x72, 0x1c, 0x6d, 0x40, 0x00,
	0x36, 0x06, 0x28, 0x73, 0x78, 0xe8, 0xc4, 0x97,
	0xc0, 0xa8, 0x01, 0x0a, 0x1f, 0x90, 0xda, 0xb8,
	0xa7, 0x5f, 0x8b, 0x4d, 0x05, 0xa8, 0x4c, 0x98,
	0x50, 0x18, 0x00, 0xfb, 0x05, 0xcc, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x0d,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x30, 0x00,
	0x00, 0x00, 0x37, 0x00, 0x36, 0x7a, 0x3a, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,
	0x00, 0x00, 0x13, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x2e, 0x41, 0x6c, 0x69,
	0x76, 0x65, 0x00, 0x00, 0x00, 0x08, 0x01, 0x41,
	0x9c, 0xdd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x04, 0x64, 0x46, 0x8b, 0xff, 0x00, 0x00,
	0x00, 0x04,
}

/*
Ethernet II, Src: ChinaMob_46:32:e0 (b0:30:55:46:32:e0), Dst: IntelCor_c5:63:e5 (a0:e7:0b:c5:63:e5)
Internet Protocol Version 4, Src: 120.219.33.13, Dst: 192.168.1.10
User Datagram Protocol, Src Port: 36582, Dst Port: 1863
Data (85 bytes)
*/
var packs1 = []byte{
	0xa0, 0xe7, 0x0b, 0xc5, 0x63, 0xe5, 0xb0, 0x30, 0x55, 0x46, 0x32, 0xe0, 0x08, 0x00,
	0x45, 0x04, 0x00, 0x71, 0xe4, 0xa5, 0x00, 0x00,
	0x78, 0x11, 0x02, 0x38, 0x78, 0xdb, 0x21, 0x0d,
	0xc0, 0xa8, 0x01, 0x0a, 0x8e, 0xe6, 0x07, 0x47,
	0x00, 0x5d, 0x5b, 0x7a, 0x1a, 0x10, 0x01, 0x20,
	0x03, 0x36, 0x0c, 0x32, 0x2e, 0x31, 0x33, 0x2e,
	0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x37, 0x42,
	0x00, 0x2a, 0xe1, 0x5c, 0x51, 0x21, 0xf0, 0x62,
	0x6d, 0xfc, 0x12, 0x53, 0x76, 0x16, 0x4f, 0x36,
	0x4d, 0x30, 0x30, 0x30, 0x32, 0x33, 0x58, 0x52,
	0x49, 0x6b, 0x32, 0x56, 0x4e, 0x55, 0x31, 0x31,
	0x2e, 0x6d, 0x67, 0x67, 0x0b, 0x26, 0x16, 0x4f,
	0x36, 0x4d, 0x30, 0x30, 0x30, 0x32, 0x33, 0x58,
	0x52, 0x49, 0x6b, 0x32, 0x56, 0x4e, 0x55, 0x31,
	0x31, 0x2e, 0x6d, 0x67, 0x67, 0x30, 0x01, 0x40,
	0x01,
}

/*
Ethernet II, Src: ChinaMob_46:32:e0 (b0:30:55:46:32:e0), Dst: IntelCor_c5:63:e5 (a0:e7:0b:c5:63:e5)
Internet Protocol Version 4, Src: 39.156.66.10, Dst: 192.168.1.10
Internet Control Message Protocol
*/
var packs2 = []byte{
	0xa0, 0xe7, 0x0b, 0xc5, 0x63, 0xe5, 0xb0, 0x30, 0x55, 0x46, 0x32, 0xe0, 0x08, 0x00,
	0x45, 0x04, 0x00, 0x3c, 0x76, 0x59, 0x00, 0x00,
	0x35, 0x01, 0xe4, 0x0b, 0x27, 0x9c, 0x42, 0x0a,
	0xc0, 0xa8, 0x01, 0x0a, 0x00, 0x00, 0x55, 0x58,
	0x00, 0x01, 0x00, 0x03, 0x61, 0x62, 0x63, 0x64,
	0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c,
	0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74,
	0x75, 0x76, 0x77, 0x61, 0x62, 0x63, 0x64, 0x65,
	0x66, 0x67, 0x68, 0x69,
}

/*
Ethernet II, Src: IntelCor_c5:63:e5 (a0:e7:0b:c5:63:e5), Dst: ChinaMob_46:32:e0 (b0:30:55:46:32:e0)
Internet Protocol Version 6, Src: 2409:8a62:e4b:6fe0:29f2:52f5:36e2:d217, Dst: 2606:4700:20::681a:bf0
Transmission Control Protocol, Src Port: 56264, Dst Port: 443, Seq: 210, Ack: 2203, Len: 0
*/
var packs3 = []byte{
	0xb0, 0x30, 0x55, 0x46, 0x32, 0xe0, 0xa0, 0xe7, 0x0b, 0xc5, 0x63, 0xe5, 0x86, 0xdd,
	0x60, 0x0a, 0x78, 0xb3, 0x00, 0x14, 0x06, 0xff,
	0x24, 0x09, 0x8a, 0x62, 0x0e, 0x4b, 0x6f, 0xe0,
	0x29, 0xf2, 0x52, 0xf5, 0x36, 0xe2, 0xd2, 0x17,
	0x26, 0x06, 0x47, 0x00, 0x00, 0x20, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x68, 0x1a, 0x0b, 0xf0,
	0xdb, 0xc8, 0x01, 0xbb, 0xc0, 0x43, 0xa3, 0xc2,
	0xc3, 0xe9, 0xa4, 0x6a, 0x50, 0x10, 0x01, 0x04,
	0x93, 0xc3, 0x00, 0x00,
}

func TestBpf(t *testing.T) {
	f := Pcap{
		Proto:   syscall.IPPROTO_TCP,
		LocPort: 55992,
		Src:     netip.AddrPortFrom(netip.AddrFrom4([4]byte{120, 232, 196, 151}), 8080),
	}
	vm, err := bpf.NewVM(append(
		f.filter(), bpf.RetConstant{Val: 0x0},
	))
	require.NoError(t, err)

	n, err := vm.Run(packs0)
	require.NoError(t, err)
	require.Equal(t, 0xffff, n)

	n, err = vm.Run(packs1)
	require.NoError(t, err)
	require.Equal(t, 0x0, n)

	n, err = vm.Run(packs2)
	require.NoError(t, err)
	require.Equal(t, 0x0, n)

	n, err = vm.Run(packs3)
	require.NoError(t, err)
	require.Equal(t, 0x0, n)
}

func BenchmarkBpf(b *testing.B) {
	f := Pcap{
		Proto:   syscall.IPPROTO_TCP,
		LocPort: 55992,
		Src:     netip.AddrPortFrom(netip.AddrFrom4([4]byte{120, 232, 196, 151}), 8080),
	}

	for i := 0; i < b.N; i++ {
		f.filter()
	}
}

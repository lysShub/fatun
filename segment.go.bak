package itun

import (
	"encoding/binary"
	"fmt"
	"io"
	"net"

	"gvisor.dev/gvisor/pkg/tcpip/header"
)

func IsMgrSeg(tcp header.TCP) bool {
	const (
		offset = 12
		flag   = 0b10111111
	)
	// NS previous bit set 0 means MgrSeg(default)

	return tcp[offset]|flag == flag
}

//	type Segment struct {
//		ID      uint16 // id 为0xffff 表示 Payload为MgrMsg
//		Payload []byte // tcp/udp packet or mgr msg
//	}
//
// todo: 考虑Tail而不是Header
type Segment []byte

type MgrMsg struct {
	MgrCode    MgrCode
	payloadLen uint16
	Payload    []byte
}

// type

type MgrCode uint8

const (
	_           MgrCode = iota
	IPv6Support         // 询问Server是否支持IPv6
	SecketKey           // 询问并交换密钥, 用于加密PxySeg

	EndConfig // 结束itun初始化配置，完成握手
	separator
	AddSession // 注册一个代理连接
	DelSession // 释放一个代理连接, 客户端通过超时主动释放（服务器也会有超时释放）
	PackLoss   // 请求Server报告上行丢包率
	end
)

func ValidateMgrCode(c MgrCode) bool {
	switch c {
	case 0, separator:
		return false
	default:
		return c < end
	}
}

func ReadMgrSeg(conn net.Conn) (*MgrMsg, error) {
	var b [3]byte
	if _, err := io.ReadFull(conn, b[:]); err != nil {
		return nil, err
	}

	var m = &MgrMsg{
		MgrCode:    MgrCode(b[0]),
		payloadLen: binary.BigEndian.Uint16(b[1:]),
	}
	if !ValidateMgrCode(m.MgrCode) {
		return nil, fmt.Errorf("invalid MgrCode")
	}

	m.Payload = make([]byte, m.payloadLen)
	if _, err := io.ReadFull(conn, m.Payload); err != nil {
		return nil, err
	}
	return m, nil
}

func WriteMgrSeg(conn net.Conn, mgr *MgrMsg) error {
	var b [3]byte

	if !ValidateMgrCode(mgr.MgrCode) {
		return fmt.Errorf("invalid MgrCode")
	}
	b[0] = byte(mgr.MgrCode)

	mgr.payloadLen = uint16(len(mgr.Payload))
	binary.BigEndian.PutUint16(b[1:], mgr.payloadLen)

	if _, err := conn.Write(b[:]); err != nil {
		return err
	}

	if _, err := conn.Write(mgr.Payload[:mgr.payloadLen]); err != nil {
		return err
	}
	return nil
}
